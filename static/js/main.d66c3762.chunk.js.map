{"version":3,"sources":["components/NoteForm.js","components/NodeItem.js","components/firebaseConnect.js","components/NoteList.js","components/NavMenu.js","components/App.js","components/store.js","serviceWorker.js","index.js"],"names":["NoteForm","props","isChange","e","name","target","value","setState","saveButton","title","content","event","state","key","item","sendEditDataToStore","changeStatusForm","addDataStore","this","editItem","className","method","defaultValue","onChange","type","placeholder","rows","onClick","Component","connect","ownProps","dispatch","NodeItem","actionClick","getEditData","role","data-toggle","data-parent","href","id","aria-expanded","aria-controls","aria-labelledby","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","noteData","database","ref","NoteList","getData","dataFirebase","map","once","notes","arrayData","forEach","element","val","push","aria-multiselectable","NavMenu","style","backgroundColor","data-target","aria-label","App","showForm","isEdit","redux","require","noteInitialState","store","createStore","action","child","update","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d66c3762.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nclass NoteForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      key: \"\",\r\n      title: \"\",\r\n      content: \"\",\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    if (this.props.editItem) {\r\n      this.setState({\r\n        key: this.props.editItem.key,\r\n        content: this.props.editItem.content,\r\n        title: this.props.editItem.title,\r\n      });\r\n    }\r\n  }\r\n  isChange = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  saveButton = (title, content, event) => {\r\n    // event.preventDefault();\r\n    if (this.state.key) {\r\n      let item = {};\r\n      item.key = this.state.key;\r\n      item.title = this.state.title;\r\n      item.content = this.state.content;\r\n      this.props.sendEditDataToStore(item);\r\n      this.props.changeStatusForm();\r\n      this.setState({\r\n        key: \"\",\r\n        title: \"\",\r\n        content: \"\",\r\n      });\r\n    } else {\r\n      let item = {};\r\n      item.title = title;\r\n      item.content = content;\r\n      this.props.addDataStore(item);\r\n      this.setState({\r\n        key: \"\",\r\n        title: \"\",\r\n        content: \"\",\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"col-4\">\r\n        <form method=\"post\">\r\n          <div className=\"form-group\">\r\n            <label>Tiêu đề note</label>\r\n            <input\r\n              defaultValue={this.props.editItem.title}\r\n              onChange={(event) => this.isChange(event)}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"title\"\r\n              placeholder=\"Tiêu đề note\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Nội dung note</label>\r\n            <textarea\r\n              defaultValue={this.props.editItem.content}\r\n              className=\"form-control\"\r\n              name=\"content\"\r\n              placeholder=\"Nội dung note\"\r\n              rows=\"3\"\r\n              onChange={(event) => this.isChange(event)}\r\n            ></textarea>\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary btn-block\"\r\n            onClick={(event) =>\r\n              this.saveButton(\r\n                this.state.title,\r\n                this.state.content,\r\n                event\r\n              )\r\n            }\r\n          >\r\n            Lưu\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    editItem: state.editItem,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    addDataStore: (item) => {\r\n      dispatch({ type: \"ADD_DATA\", item });\r\n    },\r\n    sendEditDataToStore: (editItem) => {\r\n      dispatch({ type: \"EDIT\", editItem });\r\n    },\r\n    changeStatusForm: () => {\r\n      dispatch({ type: \"CHANGE_EDIT_STATUS\" });\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteForm);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nclass NodeItem extends Component {\r\n  actionClick=()=>{\r\n    this.props.changeStatusForm();\r\n    this.props.getEditData(this.props.value)\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\" role=\"tab\">\r\n          <h5 className=\"mb-0\">\r\n            <div className=\"row\">\r\n              <div className=\"col-9\">\r\n                <a\r\n                  data-toggle=\"collapse\"\r\n                  data-parent=\"#noteList\"\r\n                  href={\"#numbers\" + this.props.id}\r\n                  aria-expanded=\"true\"\r\n                  aria-controls=\"section1ContentId\"\r\n                >\r\n                  {this.props.title}\r\n                </a>\r\n              </div>\r\n              <div className=\"col-3\">\r\n                <button className=\"btn btn-outline-info\" onClick={this.actionClick}>Sửa</button>\r\n                <button className=\"btn btn-outline-secondary\">Xóa</button>\r\n              </div>\r\n            </div>\r\n          </h5>\r\n        </div>\r\n        <div\r\n          id={\"numbers\" + this.props.id}\r\n          className=\"collapse in\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"section1HeaderId\"\r\n        >\r\n          <div className=\"card-body\">{this.props.content}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeStatusForm: () => {\r\n      dispatch({ type: \"CHANGE_EDIT_STATUS\" });\r\n    },\r\n    getEditData: (editItem) => {\r\n      dispatch({ type: \"GET_EDIT_DATA\",editItem });\r\n    },\r\n  };\r\n};\r\nexport default connect(null,mapDispatchToProps)(NodeItem);\r\n","import firebase from 'firebase';\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyC1jutE_Q6GlApt9LyKsOH6pkL2HA6xtcI\",\r\n  authDomain: \"notemanager-7b7af.firebaseapp.com\",\r\n  databaseURL: \"https://notemanager-7b7af.firebaseio.com\",\r\n  projectId: \"notemanager-7b7af\",\r\n  storageBucket: \"notemanager-7b7af.appspot.com\",\r\n  messagingSenderId: \"206592044216\",\r\n  appId: \"1:206592044216:web:dbe8b49151b2b03b02d84d\",\r\n  measurementId: \"G-0T0LP8JZQ8\",\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const noteData = firebase.database().ref(\"/dataForNote\");\r\n","import React, { Component } from \"react\";\r\nimport NodeItem from \"./NodeItem\";\r\nimport { noteData } from \"./firebaseConnect\";\r\nexport default class NoteList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataFirebase: [],\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    noteData.once(\"value\", (notes) => {\r\n      var arrayData = [];\r\n      notes.forEach((element) => {\r\n        let key = element.key;\r\n        let content = element.val().content;\r\n        let title = element.val().title;\r\n        arrayData.push({\r\n          key,\r\n          content,\r\n          title,\r\n        });\r\n      });\r\n      this.setState({\r\n        dataFirebase: arrayData,\r\n      });\r\n    });\r\n  }\r\n  getData = () => {\r\n    // console.log(this.state.dataFirebase);\r\n    return this.state.dataFirebase.map((value, key) => {\r\n      return <NodeItem \r\n      id={key}\r\n       key={key} \r\n       title={value.title} \r\n       content={value.content} \r\n       value={value}/>;\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"col\">\r\n        <div id=\"noteList\" role=\"tablist\" aria-multiselectable=\"true\">\r\n          {this.getData()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class NavMenu extends Component {\r\n  render() {\r\n    return (\r\n      <nav\r\n        className=\"navbar navbar-expand-sm navbar-dark\"\r\n        style={{backgroundColor:'black'}}\r\n      >\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          DTT\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler d-lg-none\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#collapsibleNavId\"\r\n          aria-controls=\"collapsibleNavId\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        ></button>\r\n        <div\r\n          className=\"collapse navbar-collapse justify-content-end\"\r\n          id=\"collapsibleNavId\"\r\n        >\r\n          <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                Home <span className=\"sr-only\">(current)</span>\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                Xem danh sách note\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport NoteForm from \"./NoteForm\";\nimport NoteList from \"./NoteList\";\nimport \"./../App.css\";\nimport { connect } from \"react-redux\";\nimport NavMenu from \"./NavMenu\";\nclass App extends Component {\n  showForm=()=>{\n    if(this.props.isEdit)\n    return <NoteForm/>\n  };\n  render() {\n    return (\n      <div>\n        <NavMenu />\n        <div className=\"container\">\n          <div className=\"row\">\n            <NoteList className='mt-20' />\n            {this.showForm()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isEdit: state.isEdit\n  }\n}\n\nexport default connect(mapStateToProps)(App);","import { noteData } from \"./firebaseConnect\";\r\nlet redux = require(\"redux\");\r\n\r\nconst noteInitialState = {\r\n  isEdit: false,\r\n  editItem: {},\r\n};\r\nconst allReducer = (state = noteInitialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_DATA\":\r\n      noteData.push(action.item);\r\n      return state;\r\n    case \"CHANGE_EDIT_STATUS\":\r\n      // if(state.isEdit===true) return state;\r\n      return { ...state, isEdit: !state.isEdit };\r\n    case \"GET_EDIT_DATA\":\r\n      return { ...state, editItem: action.editItem };\r\n    case \"EDIT\":\r\n      noteData.child(action.editItem.key).update({\r\n        title:action.editItem.title,\r\n        content:action.editItem.content\r\n      });\r\n      return { ...state, editItem:{} };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nlet store = redux.createStore(allReducer);\r\n// store.subscribe(()=>console.log(store.getState()));\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./components/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}